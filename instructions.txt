Assesment Question & Requirements

Today you will design, build and produce an RPC API service. JSON RPC is a fundamental
framework used throughout the blockchain industry, and is used under the hood by most of the
top web3 frameworks out there. At Ziggy, you will be interfacing with JSON RPC both directly
and indirectly every day.

Your RPC API service will have a primary function to serve up Crypto price information. And will
have the ability to be instructed to begin tracking new coins for its consumer.


Instructions to run

- install the dependencies using 'npm install'

- turn on your docker and run 'docker-compose up' to start up your external dependencies

- create an .env file and insert the following data in it
    NODE_ENV=development
    HTTP_PORT=3000
    MONGO_URI=mongodb://root:rootpassword@localhost:27017
    REDIS_URI=redis://localhost:6379
    COIN_GECKO_URI=https://api.coingecko.com/api/v3
    ADMIN_API_KEY=devadminapikey

- run 'npm run start' to start your application locally

- you can use two methods in this JSON RPC project via 'http://localhost:${HTTP_PORT}'

  1. track_rate : the track rate request must be passed with the ADMIN_API_KEY (specified in the .env) as header of 'x-api-key'
        {
            "jsonrpc": "2.0",
            "id": "1",
            "method": "track_rate",
            "params": [
                {
                    "name": "dogecoin",
                    "symbol": "doge",
                    "enabled": "true"
                }
            ]
        }
    
    curl request:

    curl --location --request POST 'http://localhost:HTTP_PORT' \
    --header 'x-api-key: ADMIN_API_KEY' \
    --header 'Content-Type: application/json' \
    --data-raw '{
        "jsonrpc": "2.0",
        "id": "1",
        "method": "track_rate",
        "params": [
            {
                "name": "dogecoin",
                "symbol": "doge",
                "enabled": "true"
            }
        ]
    }'


  2. get_rate
    {
        "jsonrpc": "2.0",
        "id": "1",
        "method": "get_rate",
        "params": []
    }

    curl request:

    curl --location --request POST 'http://localhost:HTTP_PORT' \
    --header 'Content-Type: application/json' \
    --data-raw '{
        "jsonrpc": "2.0",
        "id": "1",
        "method": "get_rate",
        "params": []
    }'


notes -> futher improvements/ TODOS
- Futher comprehensive error handling can be implemnted, using custom error classes.
- Implement Circuit Breaker/Pinging for external apis, (coin-gecko)
- Implement Websockets to move away from polling rate i.e create another transport layer